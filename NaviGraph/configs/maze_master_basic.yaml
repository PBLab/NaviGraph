# Debug
verbose: False

# General I/O
project_local_data_path: &project_local_data_path '../../../demo_data'
output_directory_path: &output_directory_path '/path/to/outputs/folder'
stream_path: *project_local_data_path # Folder path
keypoint_detection_file_path: *project_local_data_path # Only .h5 files are supported, folder path
map_path: '${project_local_data_path}/maze_map.png'

# Hydra
hydra:
  output_subdir: &experiment_dir '${output_directory_path}/${now:%Y-%m-%d}/${now:%H-%M-%S}' # change desired path up to $
#  job_logging: *experiment_dir

# Experiment I/O
experiment_output_path: *experiment_dir

# Running Mode
system_running_mode: 'calibrate' # Either 'calibrate', 'test', 'visualize', 'analyze' or a combination ex: 'calibrate&analyze'

# Components configurations
calibrator_parameters:

  points_capture_parameters:
    radius: 9
    color: (208, 224, 64) # Turquoise
    thickness: 3

  map_test_parameters:
    radius: 9
    color: (255, 0, 255) # Pink
    thickness: 3

  registration_method: 'homography&ransac'  # Either 'affine', 'homography', 'homography&ransac'
  save_transform_matrix: True
  path_to_save_calibration_files: *project_local_data_path
  pre_calculated_transform_matrix_path: '${project_local_data_path}/calibration_files/transform_matrix.npy'

# Calculate for every new experiment
map_settings:
  segment_length: 86  # pixels
  origin: (47, 40) # top-left
  grid_size: (17, 17)
  pixel_to_meter: 2279.4117647058824

location_settings:
  bodypart: 'Nose' # 'nose', 'stomach' , 'tailbase'. . . we can also implement 'mean', 'median' or weighted statistics or set location order (nose, then tail then other ....)
  likelihood: 0.3

graph:
  height: 7
  draw:
    with_labels: True
    font_weight: 'bold'
    node_size: 1000
    font_size: 15
  options:
    static_node_color: '#C9D6E8'
    static_edge_color: 'k'
    dynamic_node_color: '#FF0000'
    dynamic_edge_color: '#FF0000'
    history_node_color: '#8b0000'
    history_edge_color: '#8b0000'
    dynamic_reward_node_color: '#7CFC00'
    dynamic_reward_edge_color: '#7CFC00'
    history_reward_node_color: '#228B22'
    history_reward_edge_color: '#228B22'
    edge_width: 10

# Tile id constants
reward_tile_id: &reward_tile_id 273
learning_start_tile_id: &learning_start_tile_id 145
#memory_start_tile_id: &memory_start_tile_id 145

analyze:
  metrics:
    time_to_reward: {func_name: 'time_a_to_b', args: {a: *learning_start_tile_id, b: *reward_tile_id} } # learning session
    velocity_to_reward: { func_name: 'velocity_a_to_b', args: { a: *learning_start_tile_id, b: *reward_tile_id } } # learning session
    exploration_percentage: {func_name: 'exploration_percentage'}
    topological_distance_to_reward: {func_name: 'num_nodes_in_path', args: {a: *learning_start_tile_id, b: *reward_tile_id, min_frame_rep: 5}}
    exploration_to_reward: {func_name: 'num_nodes_in_path', args: {a: *learning_start_tile_id, b: *reward_tile_id, mode: 'exploration'} }
    eureka_path_length: {func_name: 'shortest_path_from_a_to_b', args: {a: *learning_start_tile_id, b: *reward_tile_id, levels:[5, 6], strikes: 2} }

  save_as_csv: True
  save_as_pkl: True
  save_raw_data_as_pkl: True


visualization:
  show_visualization: True
  record_visualization: False
  fps: null # use null to record with original video fps
  resize: [800, 450]
  draw_map:
    show: True
    method: 'on_top'
    frame_location: 'bottom_right'
  draw_tree:
    show: False # TODO: fix matplotlib animation slowdown
    resize_factor: 1.0
    method: 'side_by_side'
    show_tree_only: False
